Imagine you're a talented baker renowned for your delectable cupcakes. You manage your ever-growing list of customer orders using a singly linked list data structure. Each node in the list represents an order, containing details like customer name, desired flavors, and quantity.



Challenge: A new, last-minute order just arrived! A VIP customer has requested a special, limited-edition cupcake flavor you haven't included in the current list yet. You need to efficiently add this new order to the end of your existing linked list to ensure it's fulfilled in the correct sequence.



Question: How can you leverage the insertAtEnd() function within your singly linked list to seamlessly integrate this new VIP order without disrupting the processing of your existing customer orders? Explain the steps involved in modifying the linked list to accommodate this new addition.



Input Format:

Give n number of values use -1 to stop the input.



Output Format:

Do print the values of each node as space-separated.


Constraints:

1 <= input <= 10^9



Sample Input:

45

67

89

23

10

90

40

20

30

11

-1

Sample Output

45 67 89 23 10 90 40 20 30 11


SOLUTION:



class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class Linkedlist:
    def __init__(self):
        self.head=None
    def insert_at_end(self,data):
        new_node=Node(data)
        if not self.head:
            self.head=new_node
        else:
            current=self.head
            while(current.next):
                current=current.next
            current.next=new_node
    def display(self):
        current=self.head
        while(current):
            print(current.data,end=" ")
            current=current.next
#main program
ll=Linkedlist()
while True:
    value=int(input())
    if value==-1:
        break
    ll.insert_at_end(value)
ll.display()
