You're working on a music player application that utilizes a singly linked list to store song titles. You want to implement a search function to quickly check if a specific song is present in the playlist.

Challenge: Here's the code for the sll_search() function, but it's incomplete. Complete it to efficiently search for a given search_value within the singly linked list and return 1 if found, or 0 if not found.

Input Format:

Give n number of values use -1 to stop the input.

Output Format:

Return 1 if search value found else return 0.

Constraints:

1<= input <= 10000

Sample Input:

45 23 89 76 12 90 80 60 56 23 -1

23

Sample Output:

Element Found


SOLUTION:


class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class Linkedlist:
    def __init__(self):
        self.head=None
    def insert_at_end(self,data):
        new_node=Node(data)
        if self.head is None:
            self.head=new_node
            return
        last=self.head
        while last.next:
            last=last.next
        last.next=new_node    
    def sll_search(self,search_value):
        current=self.head
        while current:
            if current.data==search_value:
                return 1
            current=current.next    
        return 0        
#main program
llist=Linkedlist()
input_val=list(map(int,input().split()))
for value in input_val:
    if(value==-1):
        break
    llist.insert_at_end(value)
search_value=int(input())
result=llist.sll_search(search_value)
if result==1:
    print("Element  Found")
else:
    print("Element Not Found")


